#cloud-config
runcmd:
  # update apt sources at boot time before main cloud-init script
  - DEBIAN_FRONTEND=noninteractive apt-get -yq update
  # install REALLY necessary packages
  - DEBIAN_FRONTEND=noninteractive apt-get -yq install --install-recommends gnupg ca-certificates 
  - DEBIAN_FRONTEND=noninteractive apt-get -yq install ${linux_kernel_package}
  - DEBIAN_FRONTEND=noninteractive apt-get -yq install wireguard
  # enable kubernetes networking kernel modules
  - modprobe -a overlay br_netfilter ip_tables ip6_tables
  # reload kernel parameters
  - sudo sysctl --system
  # install containerd
  - wget -O containerd.tar.gz ${containerd_url}
  - tar Cxzvf /usr/local containerd.tar.gz
  - mkdir -p /usr/local/lib/systemd/system/
  - wget -O /usr/local/lib/systemd/system/containerd.service ${containerd_systemd_service_url}
  - systemctl daemon-reload
  - systemctl enable --now containerd
  # install runc
  - wget -O runc ${runc_url}
  - install -m 755 runc /usr/local/sbin/runc
  # install CNIs
  - wget -O cni-plugins.tgz ${cni_plugins_url}
  - mkdir -p /opt/cni/bin
  - tar Cxzvf /opt/cni/bin cni-plugins.tgz
  # install nerdctl
  - wget -O nerdctl.tar.gz ${nerdctl_url}
  - tar Cxzvf /usr/local nerdctl.tar.gz
  # Import gpg keys for kubernetes apt sources early
  - curl -fsSL ${kubernetes_apt_keyring}/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  # add apt sources for kubernetes binaries
  - echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] ${kubernetes_apt_keyring}/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
  - apt-get update -y
  - apt-get install -y kubelet=${kubernetes_version} kubeadm=${kubernetes_version} kubectl=${kubernetes_version}
  - apt-mark hold kubelet kubeadm kubectl
package_update: true
package_upgrade: true
packages:
  - apt-transport-https
  - ca-certificates
  - gnupg
  - curl
  - lsb-release
# power_state:
#   delay: "now"
#   mode: "reboot"
#   message: "shutting down for new kernel"
#   timeout: 30
#   condition: true
write_files:
  # persist kernel modules to load for containerd
  - path: /etc/modules-load.d/containerd.conf
    content: |
      overlay
      br_netfilter
      ip_tables
      ip6_tables
    owner: root:root
    permissions: "0o644"
    encoding: text/plain
    append: false
    defer: false
  # persist kernel modules to enable for kubernetes CRI/CNI
  - path: /etc/sysctl.d/99-kubernetes-cri.conf
    content: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
      net.ipv6.conf.all.forwarding        = 1
      net.bridge.bridge-nf-call-ip6tables = 1
    owner: root:root
    permissions: "0o644"
    encoding: text/plain
    append: false
    defer: false
  - path: /etc/kubernetes/resolv.conf
    content: |
      nameserver 1.1.1.1
      nameserver 1.0.0.1
      nameserver 2606:4700:4700::1111
    owner: root:root
    permissions: "0o644"
    encoding: text/plain
    append: false
    defer: false
  # because the mainline containerd does not use systemd by default, we need to patch this manually
  - path: /etc/containerd/config.toml
    content: |-
      disabled_plugins = []
      imports = []
      oom_score = 0
      plugin_dir = ""
      required_plugins = []
      root = "/var/lib/containerd"
      state = "/run/containerd"
      temp = ""
      version = 2

      [cgroup]
        path = ""

      [debug]
        address = ""
        format = ""
        gid = 0
        level = ""
        uid = 0

      [grpc]
        address = "/run/containerd/containerd.sock"
        gid = 0
        max_recv_message_size = 16777216
        max_send_message_size = 16777216
        tcp_address = ""
        tcp_tls_ca = ""
        tcp_tls_cert = ""
        tcp_tls_key = ""
        uid = 0

      [metrics]
        address = ""
        grpc_histogram = false

      [plugins]

        [plugins."io.containerd.gc.v1.scheduler"]
          deletion_threshold = 0
          mutation_threshold = 100
          pause_threshold = 0.02
          schedule_delay = "0s"
          startup_delay = "100ms"

        [plugins."io.containerd.grpc.v1.cri"]
          cdi_spec_dirs = ["/etc/cdi", "/var/run/cdi"]
          device_ownership_from_security_context = false
          disable_apparmor = false
          disable_cgroup = false
          disable_hugetlb_controller = true
          disable_proc_mount = false
          disable_tcp_service = true
          drain_exec_sync_io_timeout = "0s"
          enable_cdi = false
          enable_selinux = false
          enable_tls_streaming = false
          enable_unprivileged_icmp = false
          enable_unprivileged_ports = false
          ignore_image_defined_volumes = false
          image_pull_progress_timeout = "1m0s"
          max_concurrent_downloads = 3
          max_container_log_line_size = 16384
          netns_mounts_under_state_dir = false
          restrict_oom_score_adj = false
          sandbox_image = "registry.k8s.io/pause:3.9"
          selinux_category_range = 1024
          stats_collect_period = 10
          stream_idle_timeout = "4h0m0s"
          stream_server_address = "127.0.0.1"
          stream_server_port = "0"
          systemd_cgroup = false
          tolerate_missing_hugetlb_controller = true
          unset_seccomp_profile = ""

          [plugins."io.containerd.grpc.v1.cri".cni]
            bin_dir = "/opt/cni/bin"
            conf_dir = "/etc/cni/net.d"
            conf_template = ""
            ip_pref = ""
            max_conf_num = 1
            setup_serially = false

          [plugins."io.containerd.grpc.v1.cri".containerd]
            default_runtime_name = "runc"
            disable_snapshot_annotations = true
            discard_unpacked_layers = false
            ignore_blockio_not_enabled_errors = false
            ignore_rdt_not_enabled_errors = false
            no_pivot = false
            snapshotter = "overlayfs"

            [plugins."io.containerd.grpc.v1.cri".containerd.default_runtime]
              base_runtime_spec = ""
              cni_conf_dir = ""
              cni_max_conf_num = 0
              container_annotations = []
              pod_annotations = []
              privileged_without_host_devices = false
              privileged_without_host_devices_all_devices_allowed = false
              runtime_engine = ""
              runtime_path = ""
              runtime_root = ""
              runtime_type = ""
              sandbox_mode = ""
              snapshotter = ""

              [plugins."io.containerd.grpc.v1.cri".containerd.default_runtime.options]

            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]

              [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                base_runtime_spec = ""
                cni_conf_dir = ""
                cni_max_conf_num = 0
                container_annotations = []
                pod_annotations = []
                privileged_without_host_devices = false
                privileged_without_host_devices_all_devices_allowed = false
                runtime_engine = ""
                runtime_path = ""
                runtime_root = ""
                runtime_type = "io.containerd.runc.v2"
                sandbox_mode = "podsandbox"
                snapshotter = ""

                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                  BinaryName = ""
                  CriuImagePath = ""
                  CriuPath = ""
                  CriuWorkPath = ""
                  IoGid = 0
                  IoUid = 0
                  NoNewKeyring = false
                  NoPivotRoot = false
                  Root = ""
                  ShimCgroup = ""
                  SystemdCgroup = true

            [plugins."io.containerd.grpc.v1.cri".containerd.untrusted_workload_runtime]
              base_runtime_spec = ""
              cni_conf_dir = ""
              cni_max_conf_num = 0
              container_annotations = []
              pod_annotations = []
              privileged_without_host_devices = false
              privileged_without_host_devices_all_devices_allowed = false
              runtime_engine = ""
              runtime_path = ""
              runtime_root = ""
              runtime_type = ""
              sandbox_mode = ""
              snapshotter = ""

              [plugins."io.containerd.grpc.v1.cri".containerd.untrusted_workload_runtime.options]

          [plugins."io.containerd.grpc.v1.cri".image_decryption]
            key_model = "node"

          [plugins."io.containerd.grpc.v1.cri".registry]
            config_path = ""

            [plugins."io.containerd.grpc.v1.cri".registry.auths]

            [plugins."io.containerd.grpc.v1.cri".registry.configs]

            [plugins."io.containerd.grpc.v1.cri".registry.headers]

            [plugins."io.containerd.grpc.v1.cri".registry.mirrors]

          [plugins."io.containerd.grpc.v1.cri".x509_key_pair_streaming]
            tls_cert_file = ""
            tls_key_file = ""

        [plugins."io.containerd.internal.v1.opt"]
          path = "/opt/containerd"

        [plugins."io.containerd.internal.v1.restart"]
          interval = "10s"

        [plugins."io.containerd.internal.v1.tracing"]
          sampling_ratio = 1.0
          service_name = "containerd"

        [plugins."io.containerd.metadata.v1.bolt"]
          content_sharing_policy = "shared"

        [plugins."io.containerd.monitor.v1.cgroups"]
          no_prometheus = false

        [plugins."io.containerd.nri.v1.nri"]
          disable = true
          disable_connections = false
          plugin_config_path = "/etc/nri/conf.d"
          plugin_path = "/opt/nri/plugins"
          plugin_registration_timeout = "5s"
          plugin_request_timeout = "2s"
          socket_path = "/var/run/nri/nri.sock"

        [plugins."io.containerd.runtime.v1.linux"]
          no_shim = false
          runtime = "runc"
          runtime_root = ""
          shim = "containerd-shim"
          shim_debug = false

        [plugins."io.containerd.runtime.v2.task"]
          platforms = ["linux/arm64/v8"]
          sched_core = false

        [plugins."io.containerd.service.v1.diff-service"]
          default = ["walking"]

        [plugins."io.containerd.service.v1.tasks-service"]
          blockio_config_file = ""
          rdt_config_file = ""

        [plugins."io.containerd.snapshotter.v1.aufs"]
          root_path = ""

        [plugins."io.containerd.snapshotter.v1.btrfs"]
          root_path = ""

        [plugins."io.containerd.snapshotter.v1.devmapper"]
          async_remove = false
          base_image_size = ""
          discard_blocks = false
          fs_options = ""
          fs_type = ""
          pool_name = ""
          root_path = ""

        [plugins."io.containerd.snapshotter.v1.native"]
          root_path = ""

        [plugins."io.containerd.snapshotter.v1.overlayfs"]
          root_path = ""
          upperdir_label = false

        [plugins."io.containerd.snapshotter.v1.zfs"]
          root_path = ""

        [plugins."io.containerd.tracing.processor.v1.otlp"]
          endpoint = ""
          insecure = false
          protocol = ""

        [plugins."io.containerd.transfer.v1.local"]
          config_path = ""
          max_concurrent_downloads = 3
          max_concurrent_uploaded_layers = 3

          [[plugins."io.containerd.transfer.v1.local".unpack_config]]
            differ = ""
            platform = "linux/arm64/v8"
            snapshotter = "overlayfs"

      [proxy_plugins]

      [stream_processors]

        [stream_processors."io.containerd.ocicrypt.decoder.v1.tar"]
          accepts = ["application/vnd.oci.image.layer.v1.tar+encrypted"]
          args = ["--decryption-keys-path", "/etc/containerd/ocicrypt/keys"]
          env = ["OCICRYPT_KEYPROVIDER_CONFIG=/etc/containerd/ocicrypt/ocicrypt_keyprovider.conf"]
          path = "ctd-decoder"
          returns = "application/vnd.oci.image.layer.v1.tar"

        [stream_processors."io.containerd.ocicrypt.decoder.v1.tar.gzip"]
          accepts = ["application/vnd.oci.image.layer.v1.tar+gzip+encrypted"]
          args = ["--decryption-keys-path", "/etc/containerd/ocicrypt/keys"]
          env = ["OCICRYPT_KEYPROVIDER_CONFIG=/etc/containerd/ocicrypt/ocicrypt_keyprovider.conf"]
          path = "ctd-decoder"
          returns = "application/vnd.oci.image.layer.v1.tar+gzip"

      [timeouts]
        "io.containerd.timeout.bolt.open" = "0s"
        "io.containerd.timeout.metrics.shimstats" = "2s"
        "io.containerd.timeout.shim.cleanup" = "5s"
        "io.containerd.timeout.shim.load" = "5s"
        "io.containerd.timeout.shim.shutdown" = "3s"
        "io.containerd.timeout.task.state" = "2s"

      [ttrpc]
        address = ""
        gid = 0
        uid = 0
    owner: root:root
    permissions: "0o644"
    encoding: text/plain
    append: false
    defer: false
